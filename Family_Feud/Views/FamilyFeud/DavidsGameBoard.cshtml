@model Family_Feud.Models.PlayerInfo
@{
    Layout = null;
}
<!DOCTYPE HTML>
<html>
<head>
    @Styles.Render("~/Content/DavidsStyles")
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/bootstrap")
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="boardStyle.css">
    <title>Main Family Feud App</title>

</head>
<body class="fullPage">
    <div class="circle"> </div>
    <section class="smallxContainer" id="sXcontainer">
        <div class="SxBox">
            <div class="grayXbox" id="smallX1"> </div>
            @*<div class="redXbox"> </div>*@
        </div>
        <div class="SxBox">
            <div class="grayXbox" id="smallX2"> </div>
            @*<div class="redXbox"> </div>*@
        </div>
        <div class="SxBox">
            <div class="grayXbox" id="smallX3"> </div>
            @*<div class="redXbox"> </div>*@
        </div>
    </section>
    <div class="roundIndicator" id="roundNumber"> Round 0</div>
    <div class="roundScoreBox" id="roundScore"></div>
    <div class="team1Container">
        <div class="team1Name" id="teamName1">@Model.TeamOne</div>
        <div class="team1Total" id="teamTotal1">0</div>
    </div>
    <div class="team2Container">
        <div class="team2Name" id="teamName2">@Model.TeamTwo</div>
        <div class="team2Total" id="teamTotal2">0</div>
    </div>
    <div class="resultBoard">
        <section class="container">
            <div class="result" id="result1">
                <div class="frontResult"><p id="frontResult1"></p></div>
                <div class="backResult" id="backResult1"></div>
                <div class="pointValue" id="resultPoints1"></div>
            </div>
        </section>

        <section class="container">
            <div class="result" id="result2">
                <div class="frontResult"><p id="frontResult2"></p></div>
                <div class="backResult" id="backResult2"></div>
                <div class="pointValue" id="resultPoints2"></div>
            </div>
        </section>

        <section class="container">
            <div class="result" id="result3">
                <div class="frontResult"><p id="frontResult3"></p></div>
                <div class="backResult" id="backResult3"></div>
                <div class="pointValue" id="resultPoints3"></div>
            </div>
        </section>

        <section class="container">
            <div class="result" id="result4">
                <div class="frontResult"><p id="frontResult4"></p></div>
                <div class="backResult" id="backResult4"></div>
                <div class="pointValue" id="resultPoints4"></div>
            </div>
        </section>

        <section class="container">
            <div class="result" id="result5">
                <div class="frontResult"><p id="frontResult5"></p></div>
                <div class="backResult" id="backResult5"></div>
                <div class="pointValue" id="resultPoints5"></div>
            </div>
        </section>

        <section class="container">
            <div class="result" id="result6">
                <div class="frontResult"><p id="frontResult6"></p></div>
                <div class="backResult" id="backResult6"></div>
                <div class="pointValue" id="resultPoints6"></div>
            </div>
        </section>

        <section class="container">
            <div class="result" id="result7">
                <div class="frontResult"><p id="frontResult7"></p></div>
                <div class="backResult" id="backResult7"></div>
                <div class="pointValue" id="resultPoints7"></div>
            </div>
        </section>

        <section class="container">
            <div class="result" id="result8">
                <div class="frontResult"><p id="frontResult8"></p></div>
                <div class="backResult" id="backResult8"></div>
                <div class="pointValue" id="resultPoints8"></div>
            </div>
        </section>
    </div>
    <section class="largexContainer">
        <div class="LxBox">
            <div class="lRedXbox" id="firstWrong"></div>
        </div>
        <div class="LxBox">
            <div class="lRedXbox" id="secondWrong"></div>
        </div>
        <div class="LxBox">
            <div class="lRedXbox" id="thirdWrong"></div>
        </div>
    </section>
    <section class="buttonBox">
        <section class="buttons">
            <div class="awardTeam1" id="team1">
                <button class="btn form-control" id="team1Button">+</button>
            </div>
            <div class="nextQuestion">
                <button id="nextQuestionButton" class="btn form-control">>></button>
            </div>
            <div class="awardTeam2" id="team2">
                <button class="btn form-control" id="team2Button">+</button>
            </div>
        </section>
    </section>
    <label class="questionBox">To start, get the Steve of the group to hit the next question button.</label>


</body>
</html>
<script src="https://cdn.pubnub.com/sdk/javascript/pubnub.4.19.0.js"></script>
<script type="text/javascript">
    //  want to store these in C#
    var SubKey = "sub-c-e53da4be-c647-11e7-8d13-12daa3930087";
    var PubKey = "pub-c-12219e16-c45b-411e-aa5a-977e1a130441";
    var myChannel = 'DavidSucksBallz';

    //  hide the box containers that hold the red Xs
    $(".lRedXbox").hide();
    $(".largexContainer").hide();

    //  audio variables
    var wrongBuzzer = document.createElement('audio');
    var correctBuzzer = document.createElement('audio');

    correctBuzzer.setAttribute('src', 'http://www.qwizx.com/gssfx/usa/ff-clang.wav');
    wrongBuzzer.setAttribute('src', 'http://www.qwizx.com/gssfx/usa/ff-strike.wav');

    //  want to get rid of this bitch ass shit!
    var xCount = 0; //   used to keep track of the number of wrong
    var roundCounter = 0; // used to keep track of current round

    // Total Score Variables
    var total = $("#roundScore").text();
    var shuffledQuestions;
    //initializes pubnub channel
    var pubnub = new PubNub({
        subscribeKey: SubKey,
        publishKey: PubKey,
      
    });

    // Subscribe to the demo_tutorial channel
    pubnub.addListener({
        message: function (object) {
            console.log(object.message[1]);
            console.log(object.message[0]);
            switch (object.message[0]) {
                case "Next":
                    MakeQuestion();
                    break;
               //    team elements ID(passed in)
                case "Award":
                    AwardPoints(object.message[1]);
                    FlipRemainingAnswers();                    
                    break;
               //   need answer ID
                case "Correct":
                    //  will flip the answer
                    Flip(object.message[1]);
                    // add points to the score board
                    //AddPointsToTotal(object.message[2]);
                    break;
                case "Wrong":                 
                    DisplaySmallXs(object.message[1]);
                    //  shows the container that holds the large Xs
                    //  but leaves the individual Xs hidden so they do
                    //   not display over the game board
                    $(".largexContainer").show();
                    DisplayLargeX(object.message[1]);                    
                    break;
            }
            //console.log(message.message);
            //console.log(message);
        }
    })

    pubnub.subscribe({
        channels: [myChannel]
    });

    //// Publish a simple message to the demo_tutorial channel
    //pubnub.publish({
    //    message: ["Next"],

    //        //  keeping the prop names, but the values will be passed in via steve            
    //        //"Request": "Award",
    //        //"Who": "Team1",
    //        //"Answer":"resultID"          
                
    //    channel: myChannel
    //});
   //// var channel = PubNub.generateUUID();
   // pubnub.subscribe({
   //     channel: myChannel,
   //     restore: true,
   //     callback: function (m) { console.log("WHOA") },
   //     error: function (e) { console.log(e); },
   //     connect: function (res) { console.log("connected! BITCH!!!"); },
   //     disconnect: function (res) { console.log("disconnected HOMIE!!"); },
   //     reconnect: function (res) { console.log("reconnected WHOE");}
   // });


    //  NEXT
    function MakeQuestion() {
        $.getJSON("../../Content/Questions/FamilyFeudQuestions.json", function (data) {
            var alldata = data;
            var questions = Object.keys(data);
            //  randomizes the array of questions
            var shuffledQuestions = Shuffle(questions);
            //  pulls out the array of answers for the first question in the question array
            var answers = alldata[questions[0]];
            var numberOfAnswers = answers.length;
            //console.log(shuffledQuestions[0]);
            //console.log(answers);
            //console.log(numberOfAnswers);
            //replaces text in the questionBox
            $(".questionBox").text(shuffledQuestions[0]);

            var adjustedNumberAnswers;

            if (numberOfAnswers > 8) {
                adjustedNumberAnswers = 8;
            }
            else {
                adjustedNumberAnswers = numberOfAnswers;
            }

            for (var i = 0; i < 8; i++) {
                $("#frontResult" + (i + 1)).removeClass("p");
                $("#frontResult" + (i + 1)).text('');
                $("#backResult" + (i + 1)).text('');
                $("#resultPoints" + (i + 1)).text('');
                if ($("#result" + (i + 1)).hasClass("flipped")) {
                    FlipNoDing("#result" + (i + 1));
                }

            }

            setTimeout(function () {
                for (var i = 0; i < adjustedNumberAnswers; i++) {
                    $("#frontResult" + (i + 1)).addClass("p");
                    $("#frontResult" + (i + 1)).text(i + 1);
                    $("#backResult" + (i + 1)).text(answers[i][0]);
                    $("#resultPoints" + (i + 1)).text(answers[i][1]);
                    total = 0;
                    $("#roundScore").text(total);

                }
            }, 300);


            pubnub.publish({
                message: ["NewQuestion",shuffledQuestions[0], answers],
                channel: myChannel
            });


        });

        $(".redXbox").addClass("grayXbox");
        $(".redXbox").removeClass("redXbox");

        UpdateRound(roundCounter);
    }
    
    function Shuffle(array) {
        var currentIndex = array.length, temporaryValue, randomIndex;
        while (0 !== currentIndex) {
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex -= 1;
            temporaryValue = array[currentIndex];
            array[currentIndex] = array[randomIndex];
            array[randomIndex] = temporaryValue;
        }
        return array;
    }

    function UpdateRound(roundCount) {
        if (roundCount == 1) {
            $("#roundNumber").text('Round 2');
            roundCounter++;
        }
        else if (roundCount == 2) {
            $("#roundNumber").text('Round 3');
            roundCounter++;
        }
        else {
            roundCounter = 0;
            roundCounter++;
            $("#roundNumber").text('Round 1');

        }
    }

    //  AWARD
    function AwardPoints(teamID) {
        
        total = (+$("#roundScore").text()) + (+$(teamID).text());
        // console.log(total);
        return $(teamID).text(total);
    }

    function FlipRemainingAnswers() {
        for (var i = 1; i < 9; i++) {
            if ($("#result" + (i)).hasClass("flipped")) {

            }
            else {
                FlipNoDing("#result" + (i));
            }
        }
    }

    //  CORRECT
    //  this function triggers the flip animation for the answer boxes
    function Flip(id) {
        //  toggles the flipped class to the element whos Id was passed
        //  into the function
        $(id).toggleClass('flipped');

        $("#roundScore").text(function () {
            for (i = 1; i < 9; i++) {
                //  variable that stores the round total
                var total = (+$("#roundScore").text());
                if ($("#result" + (i)).is(id)) {
                    //  if statements below factor in the multiplicity of the round
                    if ($("#roundNumber").text() == "Round 2") {
                        // variable gets the point value associated with the correct answer
                        var points = ($("#resultPoints" + i).text() * 2);
                    }
                    else if ($("#roundNumber").text() == "Round 3") {
                        var points = ($("#resultPoints" + i).text() * 3);
                    }
                    else {
                        var points = $("#resultPoints" + i).text();
                    }

                    return (+points) + (+total);
                }
            }
        });
        //  plays the correct answer audio
        correctBuzzer.play();
    }
    // this function is the same as Flip without the correct buzzer sound
    //for the next question click event.
    function FlipNoDing(id) {
        $(id).toggleClass('flipped');
    }

    //function AddPointsToTotal(answerId) {
    //    var total = (+$("#roundScore").text());

    //    //  if statements below factor in the multiplicity of the round
    //    if ($("#roundNumber").text() == "Round 2") {
    //        // variable gets the point value associated with the correct answer
    //        var points = ($(answerId).text() * 2);
    //    }
    //    else if ($("#roundNumber").text() == "Round 3") {
    //        var points = ($(answerId).text() * 3);
    //    }
    //    else {
    //        var points = $(answerId).text();
    //    }

    //    return (+points) + (+total);
    //}

    //  WRONG
    function DisplaySmallXs(count) {
        if (count == 1) {
            //  turns the first X red
            $("#smallX1").removeClass('grayXbox');
            $("#smallX1").addClass('redXbox');

        }
        //  second click
        else if (count == 2) {
            //  turns the second X red
            $("#smallX2").removeClass('grayXbox');
            $("#smallX2").addClass('redXbox');

        }
        //  third click
        else {
            //  turns the t xhird X red
            $("#smallX3").removeClass('grayXbox');
            $("#smallX3").addClass('redXbox');

        }
    }

    //  Displays the 3 large Xs in front of the game board
    //  and hides them after 4 seconds
    function DisplayLargeX(count) {
        //  if 1 wrong answer
        if (count == 1) {
            //  diplay the 1st large X (left most X)
            $("#firstWrong").show();
        }
        //  if there are 2 wrong answers
        else if (count == 2) {
            //  display the 1st and 2nd large Xs (left most and middle Xs)
            $("#firstWrong").show();
            $("#secondWrong").show();
        }
        //  other wise there are 3 wrong answers
        else if (count == 3) {
            //  display all three large Xs
            $("#firstWrong").show();
            $("#secondWrong").show();
            $("#thirdWrong").show();
        }
        else {
            $("#secondWrong").show();
        }

        //  play the wrong answer audio buzzer
        wrongBuzzer.play();

        //  after 4 seconds the containers that hold the large Xs
        //  are hidden so players can click the middle most answer
        //  boxes
        //  Important 4 seconds
        setTimeout(function () {
            $(".lRedXbox").hide()
        }, 4000);

        setTimeout(function () {
            $(".largexContainer").hide()
        }, 4000);
    }



    // added click event to represent when a team misses a question in the beginning showdown.
    // it shows 1 x in the middle of the screen
    $(".questionBox").on('click', function () {
        var counter = 4;
        $(".largexContainer").show();
        DisplayLargeX(counter);
    });

    
        //  ****** BITCH ASS CLICK EVENTS!!

    ////  click event for the container that holds the 3 small Xs
    //$("#sXcontainer").on('click', function () {
    //    //  first click
    //    if (xCount == 0) {
    //        //  turns the first X red
    //        $("#smallX1").removeClass('grayXbox');
    //        $("#smallX1").addClass('redXbox');
    //        xCount++;
    //    }
    //    //  second click
    //    else if (xCount == 1) {
    //        //  turns the second X red
    //        $("#smallX2").removeClass('grayXbox');
    //        $("#smallX2").addClass('redXbox');
    //        xCount++;
    //    }
    //    //  third click
    //    else {
    //        //  turns the t xhird X red
    //        $("#smallX3").removeClass('grayXbox');
    //        $("#smallX3").addClass('redXbox');
    //        xCount++;
    //    }

    //    //  shows the container that holds the large Xs
    //    //  but leaves the individual Xs hidden so they do
    //    //   not display over the game board
    //    $(".largexContainer").show();

    //    DisplayLargeX(xCount);
    //});


      //  click event for the answer boxes
        //$(".result").on('click', function () {
        //    //  grabs the Id of the click answered box
        //    var thisID = $(this).prop('id');
        //    var divID = document.getElementById(thisID);

        //    // if statement prevents answer that has already been flipped to be re-flipped
        //    if ($(divID).hasClass("flipped")) {

        //    }
        //    else {
        //        //  passes the Id to the flip function
        //        Flip(divID);



        //        // allows answers to be flipped at the end of round without adding points to the total round score
        //        // if all x's have been used
        //        if (xCount <= 3) {
        //            // wapping mess that adds the total score for the round.
        //            $("#roundScore").text(function () {
        //                for (i = 1; i < 9; i++) {
        //                    //  variable that stores the round total
        //                    var total = (+$("#roundScore").text());
        //                    if ($("#result" + (i)).is(divID)) {
        //                        //  if statements below factor in the multiplicity of the round
        //                        if ($("#roundNumber").text() == "Round 2") {
        //                            // variable gets the point value associated with the correct answer
        //                            var points = ($("#resultPoints" + i).text() * 2);
        //                        }
        //                        else if ($("#roundNumber").text() == "Round 3") {
        //                            var points = ($("#resultPoints" + i).text() * 3);
        //                        }
        //                        else {
        //                            var points = $("#resultPoints" + i).text();
        //                        }

        //                        return (+points) + (+total);
        //                    }
        //                }
        //            });
        //        }
        //    }
        //});


    ////  click event for the team 1 score addition
    //$("#team1Button").on('click', function () {
    //    var team1Total = $("#teamTotal1");
    //    total = (+$("#roundScore").text()) + (+$("#teamTotal1").text());
    //    team1Total = $("#teamTotal1").text(total);
    //   // console.log(total);
    //    return $(team1Total).text();
    //});

    ////  click event for the team 2 score addition
    //$("#team2Button").on('click', function () {
    //    var team2Total = $("#teamTotal2");
    //    total = (+$("#roundScore").text()) + (+$("#teamTotal2").text());
    //    team1Total = $("#teamTotal2").text(total);
    //    // console.log(total);
    //    return $(team2Total).text();
    //});

        ////  click event for the next question button
    //$("#nextQuestionButton").on('click', function () {
    //    $.getJSON("../../Content/Questions/FamilyFeudQuestions.json", function (data) {
    //        var alldata = data;
    //        var questions = Object.keys(data);
    //        //  randomizes the array of questions
    //        var shuffledQuestions = Shuffle(questions);
    //        //  pulls out the array of answers for the first question in the question array
    //        var answers = alldata[questions[0]];
    //        var numberOfAnswers = answers.length;
    //        //console.log(shuffledQuestions[0]);
    //        //console.log(answers);
    //        //console.log(numberOfAnswers);
    //        //replaces text in the questionBox
    //        $(".questionBox").text(shuffledQuestions[0]);

    //        var adjustedNumberAnswers;

    //        if (numberOfAnswers > 8) {
    //            adjustedNumberAnswers = 8;
    //        }
    //        else {
    //            adjustedNumberAnswers = numberOfAnswers;
    //        }
    //        for (var i = 0; i < 8; i++) {
    //            $("#frontResult" + (i + 1)).removeClass("p");
    //            $("#frontResult" + (i + 1)).text('');
    //            $("#backResult" + (i + 1)).text('');
    //            $("#resultPoints" + (i + 1)).text('');
    //            if ($("#result" + (i + 1)).hasClass("flipped")) {
    //                FlipNoDing("#result" + (i + 1));
    //            }

    //        }

    //        setTimeout(function () {
    //            for (var i = 0; i < adjustedNumberAnswers; i++) {
    //                $("#frontResult" + (i + 1)).addClass("p");
    //                $("#frontResult" + (i + 1)).text(i + 1);
    //                $("#backResult" + (i + 1)).text(answers[i][0]);
    //                $("#resultPoints" + (i + 1)).text(answers[i][1]);
    //                total = 0;
    //                $("#roundScore").text(total);

    //            }
    //        }, 300);

    //    });

    //    $(".redXbox").addClass("grayXbox");
    //    $(".redXbox").removeClass("redXbox");
    //    //resets the x counter for new round
    //   xCount = 0;


    //    UpdateRound(roundCounter);



    //});

</script>